{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsWithId","map","product","index","id","getSortedGoods","goods","sortField","isReversed","goodsCopy","sort","goodA","goodB","Alphabet","localeCompare","Length","length","getSortCallback","reverse","App","useState","Default","setSortField","setIsReversed","sortedGoods","className","type","cn","onClick","Boolean","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,oFAAAA,K,WAAAA,E,oBAAAA,E,iBAAAA,M,KAcL,IAAMC,EA3ByB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcaC,KAAI,SAACC,EAASC,GAAV,MAAqB,CAAED,UAASE,GAAID,EAAQ,MAqB/D,SAASE,EACPC,EACAC,EACAC,GAEA,IAAMC,EAAS,YAAOH,GAQtB,OANAG,EAAUC,KAtBZ,SAAyBH,GACvB,OAAO,SAACI,EAAmBC,GACzB,OAAQL,GACN,KAAKR,EAAUc,SACb,OAAOF,EAAMT,QAAQY,cAAcF,EAAMV,SAE3C,KAAKH,EAAUgB,OACb,OAAOJ,EAAMT,QAAQc,OAASJ,EAAMV,QAAQc,OAE9C,QACE,OAAO,IAYEC,CAAgBV,IAE3BC,GACFC,EAAUS,UAGLT,EAGF,IAAMU,EAAgB,WAC3B,MAAkCC,mBAAoBrB,EAAUsB,SAAhE,mBAAOd,EAAP,KAAkBe,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOZ,EAAP,KAAmBe,EAAnB,KACMC,EAAcnB,EAAeL,EAAaO,EAAWC,GAQ3D,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAY5B,EAAUc,WAAaN,IAErCqB,QAAS,kBAAMN,EAAavB,EAAUc,WALxC,iCAUA,wBACEa,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAY5B,EAAUgB,SAAWR,IAEnCqB,QAAS,kBAAMN,EAAavB,EAAUgB,SALxC,4BAUA,wBACEW,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAanB,IAEfoB,QAAS,kBAAML,GAAef,IALhC,sBA7BkBqB,QAAQtB,IAAcC,IAwCtC,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QA1CiB,WACzBN,EAAavB,EAAUsB,SACvBE,GAAc,IAqCR,sBAUJ,6BACGC,EAAYvB,KAAI,gBAAGC,EAAH,EAAGA,QAASE,EAAZ,EAAYA,GAAZ,OACf,oBAAI,UAAQ,OAAZ,SAA6BF,GAALE,YCzHlC0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d19d8a15.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  Default = '',\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\ntype GoodWithId = {\n  product: string,\n  id: number,\n};\n\nfunction getGoodsWithId(goods: string[]): GoodWithId[] {\n  return goods.map((product, index) => ({ product, id: index + 1 }));\n}\n\nconst goodsWithId = getGoodsWithId(goodsFromServer);\n\ntype SortCallback = (goodA: GoodWithId, goodB: GoodWithId) => number;\nfunction getSortCallback(sortField: SortField): SortCallback {\n  return (goodA: GoodWithId, goodB: GoodWithId) => {\n    switch (sortField) {\n      case SortField.Alphabet:\n        return goodA.product.localeCompare(goodB.product);\n\n      case SortField.Length:\n        return goodA.product.length - goodB.product.length;\n\n      default:\n        return 0;\n    }\n  };\n}\n\nfunction getSortedGoods(\n  goods: GoodWithId[],\n  sortField: SortField,\n  isReversed: boolean,\n): GoodWithId[] {\n  const goodsCopy = [...goods];\n\n  goodsCopy.sort(getSortCallback(sortField));\n\n  if (isReversed) {\n    goodsCopy.reverse();\n  }\n\n  return goodsCopy;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortField>(SortField.Default);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortedGoods = getSortedGoods(goodsWithId, sortField, isReversed);\n\n  const isChanged = () => Boolean(sortField) || isReversed;\n  const resetFilterOptions = (): void => {\n    setSortField(SortField.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': SortField.Alphabet !== sortField,\n          })}\n          onClick={() => setSortField(SortField.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': SortField.Length !== sortField,\n          })}\n          onClick={() => setSortField(SortField.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isChanged() && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetFilterOptions}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(({ product, id }) => (\n          <li data-cy=\"Good\" key={id}>{product}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}